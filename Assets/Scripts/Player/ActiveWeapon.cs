using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ActiveWeapon : Singleton<ActiveWeapon>
{
    public MonoBehaviour CurrentActiveWeapon { get; private set; }

    private PlayerControls playerControls;
    private bool attackButtonDown;
    private bool isAttacking;

    protected override void Awake()
    {
        base.Awake();
        playerControls = new PlayerControls();
    }

    private void OnEnable()
    {
        playerControls.Enable();
    }

    private void Start()
    {
        playerControls.Combat.Attack.started += _ => StartAttacking();
        playerControls.Combat.Attack.canceled += _ => StopAttacking();
    }

    private void Update()
    {
        Attack();
    }

    // üü¢ Khi g·ªçi t·ª´ ActiveInventory ho·∫∑c h·ªá th·ªëng ƒë·ªïi v≈© kh√≠
    public void NewWeapon(MonoBehaviour newWeapon)
    {
        // Reset tr·∫°ng th√°i t·∫•n c√¥ng tr∆∞·ªõc khi g√°n v≈© kh√≠ m·ªõi
        isAttacking = false;
        attackButtonDown = false;

        CurrentActiveWeapon = newWeapon;
    }

    public void WeaponNull()
    {
        // Khi b·ªè v≈© kh√≠ (v√≠ d·ª• ƒë·ªïi sang slot tr·ªëng)
        isAttacking = false;
        attackButtonDown = false;

        CurrentActiveWeapon = null;
    }

    public void ToggleIsAttacking(bool value)
    {
        isAttacking = value;
    }

    private void StartAttacking()
    {
        attackButtonDown = true;
    }

    private void StopAttacking()
    {
        attackButtonDown = false;
    }

    private void Attack()
    {
        if (attackButtonDown && !isAttacking && CurrentActiveWeapon != null)
        {
            isAttacking = true;
            (CurrentActiveWeapon as IWeapon)?.Attack();
        }
    }
}
